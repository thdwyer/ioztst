
The included script is ready I think for some user review, and I have pretty
well squashed most of the bugs, it's in aÂ usable form now.

--------------------------
: Introduction and Aims :
--------------------------
Please note that double quotes surround commands that are used on your system.
or in the script.  The variable $HOME refers to an environment variable standard
to the bash shell. To check that it's present type "echo $HOME".  Another
environment variable is $PATH.  Do the same to see if your path includes $HOME/bin.
The final environment variable useful in the script is $USER

The script contains one line that removes the test dir. THIS IS COMMENTED OUT.

I intend to be basic about my documentation of this script and what it does
because the people who don't need this basic level of help are probably more
than capable of using iozone from the command line. Those that do should
find it helpful.

The intent of this script is to provide an easier method of using a complex tool
designed for benchmarking a filesystem and to do it in a way that should prevent
the user making the mistakes in command line configuration that might provide
only confusing error messages that are not very helpful.  An additional major
benefit is that you won't have to download and spend ages trying to understand
what switches and options go together and are mutually exclusive.
That will all come later. 8)  This script will enable you to run performance
tests on any storage device youhave access to and as you become familiar
with iozone you can experiment with any of the multitude of options iozone
offers.

Pay attention to the information at the top of each menu.  There are pointers
to values you should use in the current menu that may be related to previous
menu selections.

The reason I wrote this was because I had a mumber of Hitachi 4TB enterprise
grade drives lying around and wanted to make use of them, so I bought an
enclosure that has the drives slot in from above - no tools necessary.
I decided to create a zfs raidz pool and intended to do some performance
testing on it.  Once created it was necessary to test in a directory on the
new array.  Unfortunately I didn't manage to find a disk (array in this case)
benchmarking utility that could directly address the array or even run with
the target being a directory on the array to be tested.

A number of years ago I was involved in disk testing using a Novell server (UGH)
as the target, so I had a pretty good idea of what I needed to do and found
that iozone amoung other tools would do what I wanted, although there was a bit
of a learning curve.  This script evolved as a way of making the things I
learned easy to reproduce as well as being able to add new things to increase
the script's capabilities

---------------------------------------------------
: How it works, what it does and how to get there :
---------------------------------------------------
The configuration provided inside the script (directories, files etc.) is set up for
a user's home directory structure. The script will look for a directory named tmptest
in the user's home directory and if not present, will create it: /$USER/tmptest
The tests will be performed in that directory.
iozone will create an xls file (LibreOffice compatible) in the /$USER/Documents
directory.  The filename will be result.xls.

iozone is run as a source script for one reasons and an excuse, the second of which
was to provide a command line the user can see and use to look up in the command
reference document available here: https://www.iozone.org/docs/IOzone_msword_98.pdf
This should be helpful for users who want to learn more about what iozone is capable
of.the reason is that I could not find a way for iozone to accept a variable with
the names of the files it had to create.

It is advisable to create in your home directory a subdir bin (/$USER/bin)
and add it to your PATH although if you use Linux Mint it will already be present in
your .bashrc
This directory is useful for any scripts you write so you can address them directly
without having to qualify the script with an explicit path.
this is where you should put the new file: ioztst.sh

#####################################################################
#                                                                   #
#     The order of these variables is IMPORTANT - Do NOT change     #
#                                                                   #
#####################################################################
basedir="/media/tdwyer/Hitachi 4TB #1"
#basedir=/media/$USER/usbarray
#-------------------------------------
# Do not edit thest lines under pain of excommunication!
#basedir="\"$basedir\""
testdir=tmptest  # This had to be hardcoded in parts of the script
targetdir=$basedir/$testdir
savedtestbasedir=$HOME/.config/ioztst
#------------------------------------


Note: Linux Mint Cinnamon mounts any USB connected drive in /media/$USER
      so you can't substitute the environment variable $HOME in this case.
      you need to use the absolute path as shown above.
      NB as far as I know all current versions of mint will do the same

# Set the default test type as throughput
testtype=1
TT=  #"(Tput or Auto)" ## TestType

resultdir=$HOME/Documents
resultfile=results.xls
result=${resultdir}/${resultfile}
scrncapfile=scrncap.txt
scrncap=${resultdir}/${scrncapfile}
# Replaces all spaces in the returned date value with underscores
datevar=`date | sed '{s/ /_/g}'`

Tsaverunfile=Tput-"$datevar-ioz.sh"
Asaverunfile=Auto-"$datevar-ioz.sh"
Tsavedefaultfile=Tput-ioz.sh
Asavedefaultfile=Auto-ioz.sh
savedrun=${savedtestbasedir}/Run
saveddefaults=${savedtestbasedir}/Default

(Where you see $USER you can substitute the environment variable $HOME) except
for the proviso above regarding USB mounted drives


If youlook through the code, you will find various sections
related to debugging. I've left them in because 1) I haven't
finished developing this yet so all those things come in handy
if there's something happening that I haven't seen and 2), others
may find it handy if they want to try their hand at some improvement.

------------------------------------------------------------------
: Tips for testing disk arrays such as an array on a media server:
------------------------------------------------------------------
if you set up your path to the test directory on the remote array, you may not
have permission to create a directory there, this will show up on screen after
you get through the menu system and the test fails.  There is some
diagnostic information included but the permission problem will be shown above
that.  The solution is simple.  ssh to the server and cd to the $basedir you
selected. Make your test directory (named testdir) in the $basedir directory.
after that you will need to give all privileges to everyone on that directory:
in the $basedir run the command chmod 777 testdir.  Now you should be able to
run your tests.
Make sure you clean up after running the test by deleting the iozone script file
left behind and delete the testdir directory because it is a security hazard.

the script that actually runs iozone is named ioz.sh and will be in $targetdir

-------------------------------------
: Installing and running the script :
-------------------------------------
A quick tip.  Once youve decided the script is not going to blow your machine
up or erase your drive, the first run you do will be guite instructional.
it's set to produce 4 2GB files to test with.  It performs all 4 tests in about
30 seconds. My machine is a Dell XPS 9710 8-core model:
11th Gen Intel Core i7-11800H and the SSD is a Samsung model: SSD 990 PRO
It runs all 4 tests in about 30 seconds.
With a spinning disk it would be a bit slower.

Once you have the IozoneScript_v0.nn.tgz file, move it to your bin directory,
start a terminal and extract it using "tar xzvf IozoneScript_v0.65.tgz" and
"chmod +x ioztst.sh" to make it executable. Now change to your Documents directory.
Because the script is in your path you can run it from wherever you are.
To run the script type "ioztst.sh" and press enter.

Of course you'll need to install iozone from the software manager if you actually
intend to get benchmark results. You don't need to if you want to run the script
just to see what it does. It will do everything except be able to run iozone and
will finish with no performance results

When you run the script, it will display the version number for 3 seconds then
move into the menus.  All the menus have default values built in, so if you just
press <Enter> at every menu it will start a very basic set of tests that are simple
and quick to run.  It will create a directory called tmptest in your home directory
and cd to it.  It will tell you it's ready to test and ask you to press enter
It will then run what iozone calls a set of throughput tests.
On my XPS this set of tests took less than 30 secs to run on my OS'es SSD

you can look in $targetdir while the test is going on and cat ioz.sh to
see the contents.  This is the command line passed to iozone.

to watch what's going on with the CPU and disk(s) I suggest you install (from the
software manager) a tool called "Mission Center", a GUI tool that's great for
monitoring your system.  Start Mission Center from the cinnamon menu
before the "ioztst.sh" shell script

Apart from the stuff on the terminal screen, iozone creates an XLS summary file
in $HOME/Documents named results.xls

You can open this in LibreOffice calc and create graphs of the summary performance
results in the xls spreadsheet.

The terminal screen is captured to a file $HOME/Documents/scrncap.txt
If you want to get a few more details about individual tests, copy the sections
of output from the scrncap,txt file that relate to each type of test and import them
into LibreOffice.

If you're a spreadsheet guru, you might like to contribute a spreadsheet complete
with appropriate macros that will process the individual results.
Oh wait! Before that there needs to be a script that can process the results grabbed
from the screen into a CVS file.

I spent quite a bit of time on this, so I hope someone finds it useful.

---------------------
: The Initial Menus :
---------------------

 <<< Available space: 2.2T >>>
 <<< Filesystem type: ext4 >>>
 Choose the test mode. <<< Ver: 0.90.2 >>>
 Default selection is [1]
 <Up> <Dn> move, <Spacebar> select, <Enter> finish
 >> <Ctrl>C at any time to exit

[ ]   1 (New Throughput test)
[ ]   2 (New Auto test)
[ ]   3 (Save new Throughput test)
[ ]   4 (Save new Auto test)
[ ]   5 (Save Default Throughput test)
[ ]   6 (Save Default Auto test)
[ ]   7 (Choose saved test to change or rerun)
[ ]   0 (Exit)



The top line shows how much free space is on the filesystem selected for testing.
Next line the filesystem type as the OS detects it.
The next two lines above the Menu are both instructions and informational.
The Version of the script is displayed Followed by information about the
default Menu selection in the event the <Enter> key is pressed without
using the <Space> bar to select an item.  In this case it will be Menu item [1]
The last line displays Cursor movement, Menu selection and exiting the Menu.
*** Tip *** The <Up> <Dn> movement keys wrap around from top to bottom.

This Menu is a Single select menu. In other words, only one Menu item
is permitted to be chosen.  Other than the default selection, you may
select a menu item by moving to the item and pressing the <Space> bar.
At this point, pressing the <Enter> key exits the menu with the marked
item selected.  After choosing an item, there are two ways to deselect
it. By moving the cursor using the <Up> <Dn> keys the selected menu item
is deselected.  You will see the <x> in the selection box is cleared.
An alternative way to clear the selection is to press the <Space> again.

Items 1 and 2 of the menu simply allow you to define and run either an
Auto or Throughput test.  If you do not select any particular item but
on each Menu simply press the <Enter> key until you are asked to run the
test a Throughput test will be setup and run with a simple set of
parameters.  On my machine with a SSD where the tests are carried out
the Default Thtoughput sequence completes in under a minute.
It is possible to select any of the other test modes and simply press
<Enter> for each subsequent menu, forcing the default for each item.

Items 2 through 6 are the same as items 1 and 2 except saving of the
test runs is performed so the identical test can be repeated on the
same filesystem at a later time.

Items 3 and 4 allow multiple tests to be saved labeled Tput-* and Auto-*
and any can be chosen to load and run later.
Items 5 and 6 only permit one of each type of test to be saved as Default
tests they are labeled as Auto-ioz.sh and Tput-ioz.sh.

Item 7 on  the Menu is the following section.

Item 8 exits the script.

---------------------------------------------------
: Choosing the Directory for a saved file to rerun :
---------------------------------------------------

 <<< Available space: 2.2T >>>
 <<< Filesystem type: ext4 >>>
 Choose the directory. <<< Ver: 0.90.2 >>>
 Default selection is [1]
 <Up> <Dn> move, <Spacebar> select, <Enter> finish
 >> <Ctrl>C at any time to exit

[ ]   1 (Run Directory)
[ ]   2 (Default Directory)
[ ]   3 (Change basedir on all files)



There is no need to discuss the upper lines of the menu display, except
to say the Default selection for this Menu is item 1

This Menu is also a Single select menu, and choices  1 and do not
require explanation.

Item 3 is to accomodate the situation where you have changed the target
Directory and you eant to continue to use the files you have created
definitions that are used to run iozone.
Chosing this option allows you to parse all the files you've
created and any with the incorrect targetdir definition will
be edited.

-----------------------------------------------
: Choosing a saved file from the Run Directory :
-----------------------------------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Choose the file. <<< Ver: 0.81 >>>
 Default selection is [0]
 <Up> <Dn> move, <Spacebar> select, <Enter> finish
 >> <Ctrl>C at any time to exit

[ ]   0  (Auto-Wed 14 Aug 2024 18:49:39 AWST-ioz.sh )
[ ]   1  (Auto-Wed 14 Aug 2024 18:58:50 AWST-ioz.sh )
[ ]   2  (Tput-Wed 14 Aug 2024 18:31:45 AWST-ioz.sh )
[ ]   3  (Tput-Wed 14 Aug 2024 18:43:40 AWST-ioz.sh )
[ ]   4  (Tput-Wed 14 Aug 2024 18:45:05 AWST-ioz.sh )
[ ]   5  (Tput-Wed 14 Aug 2024 18:46:25 AWST-ioz.sh )
[ ]   6  (Tput-Wed 14 Aug 2024 18:49:09 AWST-ioz.sh )
[ ]   7  (Tput-Wed 14 Aug 2024 18:57:21 AWST-ioz.sh )


This Menu is also a Single select menu, and the choices do not
require explanation. The Default selection for ths menu is 0.
Select a file and press enter.

----------------------------------------------------
: Choosing a saved file from the Default Directory :
----------------------------------------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Choose the file. <<< Ver: 0.82 >>>
 Default selection is [0]
 <Up> <Dn> move, <Spacebar> select, <Enter> finish
 >> <Ctrl>C at any time to exit

[ ]   0  (Auto-ioz.sh )
[ ]   1  (Tput-ioz.sh )

This Menu is also a Single select menu, and the choices do not
require explanation. The Default selection for ths menu is 0.
Select a file and press enter.

[x]   1  (Tput-ioz.sh )


   File to copy [Tput-ioz.sh] to:
   Target:      [/home/tdwyer/tmptest/ioz.tst]
   Ready to test

   Press Enter to start testing

-----------------------------------------
: Item 3 (Change basedir on all files)  :
-----------------------------------------

   looping through all *ioz.sh files

      Current directory /home/[username]/.config/ioztst/Default
  >>> Filename is: Auto-ioz.sh

  <<< Rewriting file: Auto-ioz.sh with new "/media/[username]/Hitachi 4TB #1"/tmptest >>>
  <<< Press Enter to do it! >>>

...

Replacing string "/media/[username]/usbarray"/tmptest with "/media/[username]/Hitachi 4TB #1"/tmptest

  >>> Filename is: Tput-ioz.sh

  <<< Rewriting file: Tput-ioz.sh with new "/media/[username]/Hitachi 4TB #1"/tmptest >>>
  <<< Press Enter to do it! >>>

--------------------------------------
: Item 2  Main menu: (New Auto test) :
--------------------------------------


----------------------------------------------------------
: After selecting item 1, the new [Throughput|Auto] test :
----------------------------------------------------------

Test selected: [1|2]  New [Throughput|Auto] test
 Specify which tests to run using the '-i' option.
 Default selection is [0 and 1]
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   0 (write/rewrite)
[ ]   1 (read/re-read)
[ ]   2 (random-read/write)
[ ]   3 (read-backwards)
[ ]   4 (re-write-record)
[ ]   5 (stride-read)
[ ]   6 (fwrite/re-fwrite)
[ ]   7 (fread/re-fread)
[ ]   8 (random mix)
[ ]   9 (pwrite/re-pwrite)
[ ]   10 (pread/re-pread)
[ ]   11 (pwritev/re-pwritev)
[ ]   12 (preadv/re-preadv)

This menu looks quite daunting, but the defaults are selections 0 and 1.
These are both relatively quick and will not load your computer up much.
The rest of these options can hugely increase the time it woukd take to
finish testing.
Look in the references for the official iozone documentation

------------------------------------
: Maximum number of threads to run :
------------------------------------

<<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Test selected: [1|2]  New [Throughput|Auto] test
 Default selection is [4]
 Select the maximum number of threads to run (-t option, threads).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (1 threads)
[ ]   2 (2 threads)
[ ]   4 (4 threads)
[ ]   8 (8 threads)
[ ]   16 (16 threads)
[ ]   32 (32 threads)

This actually refers to the number of files to create and other later
selections depend on and are constrained by what you choose here
The default is 4 and will create 4 files (threads) to be used by other
processes during testing.

----------------------
:Upper thread limit :
----------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Test selected: 1  New Throughput test
 Default selection is [4] must be less than or equal to 4
 Select the upper thread limit (-u option, uplim).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (1 upper limit procs)
[ ]   2 (2 upper limit procs)
[ ]   4 (4 upper limit procs)
[ ]   8 (8 upper limit procs)
[ ]   16 (16 upper limit procs)
[ ]   32 (32 upper limit procs)

This menu is for Throughput tests only
This depends on what you chose for the Maximum number of threads
to run.  You must set this to be less than or equal to that setting.
The Default is 4 which satisfies that requirement.

----------------------
: Lower thread limit :
----------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Test selected: 1  New Throughput test
 Default selection is [2] must be less than or equal to 4
 Select the lower thread limit (-l option, lowlim).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (1 lower limit procs)
[ ]   2 (2 lower limit procs)
[ ]   4 (4 lower limit procs)
[ ]   8 (8 lower limit procs)
[ ]   16 (16 lower limit procs)
[ ]   32 (32 lower limit procs)

This menu is for Throughput tests only
This depends on the selection for the Upper thread limit in the
previous menu.  You must set this to be less than or equal to
that setting.  The Default is 2 which satisfies that requirement.

-------------------------------------------------------------------------
: Single Filesize for testing each testfile is this size (Thread count) :
-------------------------------------------------------------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Test selected: [1|2]  New [Throughput|Auto] test (fsize)
 Default selection is [8]
 Select the (single) filesize for this test (-s option).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (1GB)
[ ]   2 (2GB)
[ ]   4 (4GB)
[ ]   8 (8GB)
[ ]   16 (16GB)
[ ]   32 (32GB)

If you intend to do testing with large files pay attention to the
Available space value on the top line. other than that, for the filesize
you choose there will be however many files created as you selected
for the Number of Threads. The Default for this value is 8


------------------------------------------------------------------------
: Record size used in read/write operations on the files created above :
------------------------------------------------------------------------

 <<< Available space: 642G >>>
 <<< Filesystem type: ext4 >>>
 Test selected: 2  New Auto test (recsize)
 Default selection is [4]
 Select the record size for this test (-r option).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (1KB)
[ ]   2 (2KB)
[ ]   4 (4KB)
[ ]   8 (8KB)
[ ]   16 (16KB)
[ ]   32 (32KB)
[ ]   64 (64KB)
[ ]   128 (128KB)
[ ]   256 (256KB)
[ ]   512 (512KB)

This menu is only for Auto tests.
As above, this menu allows selection of the records to be written and
read from the files created above 4KB is pretty good for most systems
asyou go up and down from that number expect performance do drop off
sharply.  The Default is 4 which is most practical to start with.

The default for these options; this is a Multi select menu can
slow your filesystem to a crawl which is great if you want to
find out what the raw read/write speed is on your Disk/Array
Just be aware to start off carefully.

I started an otherwise default Auto test with all these
options chosen just to see how my USB3 connected 5 Disk ZFS
array would perform.  That was 5 days ago. It's still running.

-----------------------------------------------------
: Minimum Record size used in read/write operations :
-----------------------------------------------------

 <<< Available space: 2.2T >>>
 <<< Filesystem type: ext4 >>>
 Test selected: 2  New Auto test
 Default selection is [2] must be less than or equal to 4
 Choose the Minimum Record size for this test (-y option).
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   1 (KB)
[ ]   2 (KB)
[ ]   4 (KB)
[ ]   8 (KB)
[ ]   16 (KB)
[ ]   32 (KB)


-------------------------------------------------
: OS and filesystem cacheing - ZFS particularly :
-------------------------------------------------

 Test selected: 1  New [Throughput|Auto] test
 Default selection is Nothing Selected: -I -o -+w 1 -+y 1 -+C 1 options
 Specify which cacheing options to disable.
 <Up> <Dn> move, <Spacebar> select, <Enter> finish

[ ]   0 (-I bypass the buffer cache.)
[ ]   1 (-o This forces all writes to the file to go completely to disk.)
[ ]   2 (-+w 1 Percent of dedup-able data in buffers.)
[ ]   3 (-+y 1 Percent of dedup-able within & across files in buffers.)
[ ]   4 (-+C 1 Percent of dedup-able within & not across files in buffers.)

--------------------------------------------------------
: You've gone past all the menus.  The tests can begin :
--------------------------------------------------------

Current Dir: /home/[yourname]/tmptest
 Test Dir: /home/[yournametmptest
   Ready to test

   Press Enter to start testing


Go ahead and do it!

-----------------------------------------------------------------

Actual partial output:

	Iozone: Performance Test of File I/O
	        Version $Revision: 3.489 $
		Compiled for 64 bit mode.
		Build: linux-AMD64

	Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins
	             Al Slater, Scott Rhine, Mike Wisner, Ken Goss
	             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,
	             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,
	             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,
	             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,
	             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,
	             Vangel Bojaxhi, Ben England, Vikentsi Lapa,
	             Alexey Skidanov, Sudhir Kumar.

	Run began: Thu Aug 15 08:43:31 2024

	Include fsync in write timing
	CPU utilization Resolution = 0.000 seconds.
	CPU utilization Excel chart enabled
	Excel chart generation enabled
	Record Size 4 kB
	File size set to 8388608 kB
	Command line used: iozone -e -+u -R -i 0 -i 1 -l 2 -u 4 -r 4k -s 8g -t 4 -b [...]/results.xls -F [...]/tmptest/f[1-4]

	Output is in kBytes/sec
	Time Resolution = 0.000001 seconds.
	Processor cache size set to 1024 kBytes.
	Processor cache line size set to 32 bytes.
	File stride size set to 17 * record size.
	Min process = 2
	Max process = 4
	Throughput test with 4 processes
	Each process writes a 8388608 kByte file in 4 kByte records

-----------------------------------------------------------------

End of docs  Refer to the iozone manual below for details on
any particular questions you may have or r\there is a precis
at th bottom of this document.

-----------------------------------------------------------------
--------------
: References :
--------------
Many thanks to The iozone creators of course.
For the official iozone documentation look here:
https://www.iozone.org/docs/IOzone_msword_98.pdf

For the original script that is the basic (unmodified) menuing system:
https://gist.github.com/sergiofbsilva/099172ea597657b0d0008dc367946953
who got it from a user on linuxquestions.org related to a
large-multi-select-list-bash-script.

For clever bits of regex stuff that always baffle me, sed and awk string
manipulation that confuses me and other stuff I can't remember,
thank you to all the people  who made google's searched links worthwhile

Terry Dwyer Aug 2024
---------------------------------------------------------------------------

Appendix

KMG: Kilobytes, Megabytes, Gigabytes

Some individual test settings:

   iozone -e \                       # Flush buffers inc in test
          -i 0 -i 1 -i 2 -i 8 \      # Type of each test to run
          -l ${lowlim} \             # Lower limit of processes
          -u ${uplim} \              # Upper limit of processes
          -r ${recsize}k \           # Record size to use #k, #m, #g
          -s ${fsize}g \             # Size of test files #k, #m, #g
          -t ${threads} \            # Number of threads
          -F ${targetdir}${fnames} \ # dir/files for tests
          -b ${result}               # excel filename

iozone will operate in the current directory by default. If you wish to test
your ZFS pool, change directories to the relevant directory containing the pool
or child filesystems, then execute iozone.

-a auto mode
-C (Show bytes transferred by each child in throughput testing)
-M (call uname() and will put the string in the output file)
-b /home/tdwyer/documents/results.xls
-f Directory
-F /testdirectory/file{1,2,3,4,5,6,7,8} (Specify the directory/temporary
   file names to be used in the testing Process or threads) must be equal
   or greater than option -t This runs in throughput mode.
-e (Include flush (fsync,fflush) in the timing calculations)
-g # Set maximum file size (in Kbytes) for auto mode.
-i # -i # -i # is also supported so that one may select more than one test.
-i 0 (write/rewrite)
-i 1 (read/re-read)
-i 2 (random-read/write)
-i 8 (mixed workload)
-l 4 (lower limit on number of processes to run)
-n # Set minimum file size (in KMGbytes) for auto mode
-o This forces all writes to the file to go completely to disk before returning to the benchmark.
-p (Purge processor cache)
-+p 70 (percentage of threads/processes for read testing in the mixed workload case)
-q (Auto Mode) maximum record size #k, #m #g bytes
-r record size, #k, #m #g bytes
* -R (Generate Excel report - use with option -b)
-s (Size of the file to test, #k, #m #g bytes) Throughput mode
-S 40960 (Set processor cache size to value in bytes, #k, #m #g bytes)
-u 8 (upper limit on number of processes to run) Must be <= option -s
-+u (enable CPU statistics collection.)
-t 8 (Run  Iozone in a throughput mode - Specify Num of threads) see option -F
-T (Enable time stamps logging.)
-y (Auto Mode) minimum record size #k, #m #g bytes

* -I Use DIRECT I/O for all file operations. Tells the filesystem that all operations
     are to bypass the buffer cache and go directly to disk. This also will use
     VX_DIRECT on VxFS, and O_DIRECT on Linux.
* -+r Enable O_RSYNC and O_SYNC for all I/O testing.
* -+w ## Percent of dedup-able data in buffers. ZFS
* -+y ## Percent of dedup-able within & across files in buffers. ZFS
* -+C ## Percent of dedup-able within & not across files in buffers. ZFS
 Starting with version 9.2.1, FreeNASÂ® enables compression on newly created ZFS pools
 by default. Since IOzone creates test data that is compressible, this can skew test
 results. To configure IOzone to generate incompressible test data, include the options
 -+w 1 -+y 1 -+C 1


-i #
     Used to specify which tests to run.
     0  write/rewrite,
     1  read/re-read,
     2  random-read/write
     3  Read-backwards,
     4  Re-write-record,
     5  stride-read,
     6  fwrite/re-fwrite,
     7  fread/Re-fread,
     8  random mix,
     9  pwrite/Re-pwrite,
     10 pread/Re-pread,
     11 pwritev/Re-pwritev,
     12 preadv/Re-preadv).
One will always need to specify 0 so that any of the following tests will have a file to measure.

-n # Set minimum file size (in KMGbytes) for auto mode

-g # Set maximum file size (in KMGbytes) for auto mode.

-q # Set maximum record size (in KMGbytes) for auto mode.

-y # Set minimum record size (in KMGbytes) for auto mode.

-t Sets the number of threads and therfore throughput mode - not usable in Auto mode

-l used in throughput mode only (lower limit on number of processes to run)

-u used in throughput mode only (upper limit on number of processes to run)

 All iozone tests

 iozone -a -i 0 -s 2m -r 1k -f /$HOME/testdir -b /$HOME/documents/results.xls

.
